{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/BuyMeACupOfCoffee.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract BuyMeACupOfCoffee is Ownable {\r\n    // State variables\r\n    uint256 public constant MINIMUM_USD = 10 ** 16;\r\n    address[] private s_bosses;\r\n    mapping(address => bool) private s_isBoss;\r\n    mapping(address => uint256) private s_addressToAmountFunded;\r\n\r\n    // Events\r\n    event Funded(address indexed boss, uint256 indexed amount);\r\n\r\n    constructor(address owner) Ownable(owner) {}\r\n\r\n    receive() external payable {}\r\n\r\n    /// @notice Funds our contract based on the ETH/USD price\r\n    function fund() public payable {\r\n        require(msg.value >= MINIMUM_USD, \"You need to spend more ETH!\");\r\n        s_addressToAmountFunded[msg.sender] += msg.value;\r\n        if (!s_isBoss[msg.sender]) {\r\n            s_bosses.push(msg.sender);\r\n            s_isBoss[msg.sender] = true;\r\n        }\r\n        emit Funded(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        address[] memory bosses = s_bosses;\r\n        for (uint256 bossIndex = 0; bossIndex < bosses.length; bossIndex++) {\r\n            address boss = bosses[bossIndex];\r\n            s_addressToAmountFunded[boss] = 0;\r\n            s_isBoss[msg.sender] = false;\r\n        }\r\n        s_bosses = new address[](0);\r\n\r\n        address owner = owner();\r\n        (bool success, ) = owner.call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    function getAddressToAmountFunded(\r\n        address bossAddress\r\n    ) public view returns (uint256) {\r\n        return s_addressToAmountFunded[bossAddress];\r\n    }\r\n\r\n    function getBoss(uint256 index) public view returns (address) {\r\n        return s_bosses[index];\r\n    }\r\n    function getFundedLength() public view returns (uint256) {\r\n        return s_bosses.length;\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner();\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}